<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVFQ5iZkoEBAMKCQRzajmNhU2OilWQkF6SlWaUmm+W
        oHeZpX+YpH6VoXyIknEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAkIRNpZj+GhFaPkWKUmm6VnnaPmXaAimpTW0UKCwgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>